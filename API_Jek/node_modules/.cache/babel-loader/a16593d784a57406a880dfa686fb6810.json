{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rodrigo\\\\Desktop\\\\API_Jek\\\\react-google-authentication\\\\src\\\\components\\\\Login.js\";\nimport React from 'react';\nimport { GoogleLogin } from 'react-google-login';\nimport { refreshTokenSetup } from '../utils/refreshToken';\nconst clientId = '707788443358-u05p46nssla3l8tmn58tpo9r5sommgks.apps.googleusercontent.com';\n\nfunction Login() {\n  const onSuccess = res => {\n    console.log('Login Success: currentUser:', res);\n    alert(`Logged in successfully welcome ${res.profileObj.name}.`);\n    refreshTokenSetup(res);\n  };\n\n  const signInAsyncGOOGLE = async () => {\n    setLoading(true);\n\n    try {\n      const result = await Google.logInAsync({\n        ClientId: \"313632166596-m3spk8s89uvia1e1ot0kmifd8opv29hh.apps.googleusercontent.com\",\n        scopes: [\"profile\", \"email\"]\n      });\n      const {\n        type,\n        user,\n        idToken\n      } = result;\n\n      if (type === \"success\") {\n        axios.post('https://8c7a-2001-818-eacf-6d00-9061-4a3c-c757-9300.eu.ngrok.io/users/login/', {\n          email: user.email,\n          token: idToken\n        }).then(res => {\n          console.log(res.data); //fazer coisas com a resposta:\n\n          let {\n            status,\n            token,\n            user_mail,\n            first_name,\n            last_name,\n            error\n          } = res.data;\n\n          if (error) {\n            setLoading(false);\n            setError(true);\n            console.log(\"something whent wrong: \", error);\n            return;\n          }\n\n          if (status === \"found\") {\n            setLoading(false);\n            login(token);\n          } else {\n            setLoading(false);\n            console.log(\"user not found\");\n            navigation.navigate(\"SignUp\", {\n              params: {\n                email: user_mail,\n                fname: first_name,\n                lname: last_name\n              }\n            });\n          }\n        }).catch(err => {\n          console.log(err);\n          return err;\n        });\n      } else if (type === \"cancel\") {\n        console.log(\"cancelled by user\");\n      }\n    } catch (error) {\n      console.error(\"error with login\", error);\n    }\n\n    setLoading(false);\n  }; // const onSuccess = async googleData => {  const res = await fetch(\"/api/v1/auth/google\", {\n  //   method: \"POST\",\n  //   body: JSON.stringify({\n  //   token: googleData.tokenId\n  // }),\n  // headers: {\n  //   \"Content-Type\": \"application/json\"\n  // }\n  // })  \n  // console.log(googleData.tokenId);\n  // }\n\n\n  const onFailure = res => {\n    console.log('Login failed: res:', res);\n    alert(`Failed to login.`);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(GoogleLogin, {\n    clientId: clientId,\n    buttonText: \"Login\",\n    onSuccess: onSuccess,\n    onFailure: onFailure,\n    cookiePolicy: 'single_host_origin',\n    style: {\n      marginTop: '100px'\n    },\n    isSignedIn: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Login;","map":{"version":3,"sources":["C:/Users/Rodrigo/Desktop/API_Jek/react-google-authentication/src/components/Login.js"],"names":["React","GoogleLogin","refreshTokenSetup","clientId","Login","onSuccess","res","console","log","alert","profileObj","name","signInAsyncGOOGLE","setLoading","result","Google","logInAsync","ClientId","scopes","type","user","idToken","axios","post","email","token","then","data","status","user_mail","first_name","last_name","error","setError","login","navigation","navigate","params","fname","lname","catch","err","onFailure","marginTop"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { GoogleLogin } from 'react-google-login';\r\nimport { refreshTokenSetup } from '../utils/refreshToken';\r\n\r\nconst clientId =\r\n  '707788443358-u05p46nssla3l8tmn58tpo9r5sommgks.apps.googleusercontent.com';\r\n\r\nfunction Login() {\r\n  const onSuccess = (res) => {\r\n    console.log('Login Success: currentUser:', res);\r\n    alert(\r\n      `Logged in successfully welcome ${res.profileObj.name}.`\r\n    );\r\n    refreshTokenSetup(res);\r\n  };\r\n\r\n  const signInAsyncGOOGLE = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const result = await Google.logInAsync({\r\n        ClientId:\r\n          \"313632166596-m3spk8s89uvia1e1ot0kmifd8opv29hh.apps.googleusercontent.com\",\r\n        scopes: [\"profile\", \"email\"],\r\n      });      const { type, user, idToken } = result;      if (type === \"success\") {        axios.post('https://8c7a-2001-818-eacf-6d00-9061-4a3c-c757-9300.eu.ngrok.io/users/login/', { email: user.email, token: idToken }).then((res) => {\r\n          console.log(res.data);          //fazer coisas com a resposta:\r\n          let { status, token, user_mail, first_name, last_name, error } = res.data;\r\n          if (error) {\r\n            setLoading(false);\r\n            setError(true)\r\n            console.log(\"something whent wrong: \", error)\r\n            return;\r\n          }          if (status === \"found\") {\r\n            setLoading(false);\r\n            login(token);\r\n          } else {\r\n            setLoading(false);\r\n            console.log(\"user not found\");            navigation.navigate(\"SignUp\", {\r\n              params: {\r\n                email: user_mail, fname: first_name, lname: last_name\r\n              }\r\n            });\r\n          }        }).catch((err) => {\r\n          console.log(err);\r\n          return err;\r\n        });      } else if (type === \"cancel\") {\r\n        console.log(\"cancelled by user\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"error with login\", error);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  \r\n  // const onSuccess = async googleData => {  const res = await fetch(\"/api/v1/auth/google\", {\r\n  //   method: \"POST\",\r\n  //   body: JSON.stringify({\r\n  //   token: googleData.tokenId\r\n  // }),\r\n  // headers: {\r\n  //   \"Content-Type\": \"application/json\"\r\n  // }\r\n  // })  \r\n  // console.log(googleData.tokenId);\r\n  // }\r\n\r\n  const onFailure = (res) => {\r\n    console.log('Login failed: res:', res);\r\n    alert(\r\n      `Failed to login.`\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <GoogleLogin\r\n        clientId={clientId}\r\n        buttonText=\"Login\"\r\n        onSuccess={onSuccess}\r\n        onFailure={onFailure}\r\n        cookiePolicy={'single_host_origin'}\r\n        style={{ marginTop: '100px' }}\r\n        isSignedIn={true}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n"]},"metadata":{},"sourceType":"module"}